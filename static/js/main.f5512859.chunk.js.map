{"version":3,"sources":["logo.svg","button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","number","onClick","disabled","style","display","label","toString","value","className","App","useState","setValue","correctValue","isSuccess","setIsSuccess","btnDisabled","setBtnDisabled","testval","appendNumber","newValue","parseInt","length","background","align","width","alignSelf","textAlign","map","answer","btnContainer","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,sICY5BC,MATf,YAAgD,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAC/B,OACI,yBAAKC,MAAO,CAAEC,QAAS,WACnB,4BAAQC,MAAOL,EAAOM,WAAYC,MAAOP,EAAQC,QAASA,EACtDC,SAAUA,EAAUM,UAAU,YAAYR,K,MC+E3CS,MAhFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNH,EADM,KACCI,EADD,OAE2BD,mBAAS,MAFpC,mBAENE,EAFM,aAGqBF,oBAAS,IAH9B,mBAGNG,EAHM,KAGKC,EAHL,OAIyBJ,oBAAS,GAJlC,mBAINK,EAJM,KAIOC,EAJP,OAQiBN,mBAAS,CAAC,EAAE,EAAE,EAAE,IARjC,mBAQNO,EARM,KAWb,SAASC,EAAalB,GACpB,IAAImB,EAAWC,SAASb,EAAMD,WAAaN,EAAOM,YAEhDQ,EADEK,GAAYP,GAMZO,EAASb,WAAWe,OAAST,EAAaN,WAAWe,OACvDL,GAAe,GAEfA,GAAe,GAEjBL,EAASQ,GASX,OAjCa,KAkCX,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKc,WAAW,SAASC,MAAM,SAASpB,MAAyB,CAACqB,MAAO,SACxEX,EAAY,wBAAIV,MAAyB,CAACqB,MAAO,SAArC,yBACX,wBAAIrB,MAAyB,CAACqB,MAAO,QAASC,UAAU,SAASC,UAAU,UAA3E,SAA2FnB,GAC5FU,EAAQU,KAAI,SAACC,GAAD,OACT,yBAAKpB,UAAU,aAAaoB,OAchC,yBAAKzB,MAAO0B,GAEV,kBAAC,EAAD,CAAQ7B,OAAQ,EAAGC,QAAS,kBAAMiB,EAAa,IAAIhB,SAAUa,IAC7D,kBAAC,EAAD,CAAQf,OAAQ,EAAGC,QAAS,kBAAMiB,EAAa,IAAIhB,SAAUa,IAC7D,kBAAC,EAAD,CAAQf,OAAQ,EAAGC,QAAS,kBAAMiB,EAAa,IAAIhB,SAAUa,IAC7D,6BACA,kBAAC,EAAD,CAAQf,OAAQ,EAAGC,QAAS,kBAAMiB,EAAa,IAAIhB,SAAUa,IAC7D,kBAAC,EAAD,CAAQf,OAAQ,EAAGC,QAAS,kBAAMiB,EAAa,IAAIhB,SAAUa,IAC7D,kBAAC,EAAD,CAAQf,OAAQ,EAAGC,QAAS,kBAAMiB,EAAa,IAAIhB,SAAUa,IAC7D,6BACA,kBAAC,EAAD,CAAQf,OAAQ,EAAGC,QAAS,kBAAMiB,EAAa,IAAIhB,SAAUa,IAC7D,kBAAC,EAAD,CAAQf,OAAQ,EAAGC,QAAS,kBAAMiB,EAAa,IAAIhB,SAAUa,IAC7D,kBAAC,EAAD,CAAQf,OAAQ,EAAGC,QAAS,kBAAMiB,EAAa,IAAIhB,SAAUa,IAC7D,6BACA,kBAAC,EAAD,CAAQf,OAAQ,EAAGC,QAAS,kBAAMiB,EAAa,IAAIhB,SAAUa,IAE7D,8BAEF,yBAAKZ,MAAO,CAACuB,UAAW,WACtB,4BAAQzB,QA9ChB,WACEU,EAAS,IACTG,GAAa,GACbE,GAAe,IA2CoBb,MAAO,CAAE2B,gBAAiB,QAAvD,aASJD,EAAe,CACnBH,UAAW,UC7EOK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5512859.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState } from 'react';\r\nimport './styles/buttonStyle.scss';\r\n\r\nfunction Button({ number, onClick, disabled }) {\r\n    return (\r\n        <div style={{ display: \"inline\" }}>\r\n            <button label={number.toString()} value={number} onClick={onClick}\r\n                disabled={disabled} className=\"btnStyle\">{number}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, { useCallback, useState } from 'react';\r\nimport logo from './logo.svg';\r\n// import './App.css';\r\nimport Button from './button.js';\r\nimport './styles/app.scss';\r\n\r\nfunction App() {\r\n  const [value, setValue] = useState(\"\");\r\n  const [correctValue, setCorrectValue] = useState(1234);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [btnDisabled, setBtnDisabled] = useState(false);\r\n\r\n  //i want to be able to enter any number length and it dynamically populate the\r\n  // interface with the correct number of blank boxes that the user can enter guesses in\r\n  const [testval, setTestval] = useState([1,2,3,4]);\r\n\r\n\r\n  function appendNumber(number){\r\n    var newValue = parseInt(value.toString() + number.toString());\r\n    if (newValue == correctValue){\r\n      setIsSuccess(true);\r\n    } else {\r\n      setIsSuccess(false);\r\n    }\r\n    \r\n    if (newValue.toString().length < correctValue.toString().length){\r\n      setBtnDisabled(false);\r\n    } else {\r\n      setBtnDisabled(true);\r\n    }\r\n    setValue(newValue);\r\n  }\r\n\r\n  function clearValue(){\r\n    setValue(\"\");\r\n    setIsSuccess(false);\r\n    setBtnDisabled(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" >\r\n      <header className=\"App-header\">\r\n        <div background=\"dark-1\" align=\"center\" style={{margin: \"auto\"}, {width: \"100%\"}}>\r\n        {isSuccess ? <h1 style={{margin: \"auto\"}, {width: \"100%\"}}>Success!!!!!!!!!!!!!!</h1> \r\n        : <h1 style={{margin: \"auto\"}, {width: \"100%\"}} alignSelf=\"center\" textAlign=\"center\">Code: {value}</h1>}\r\n        {testval.map((answer) => (\r\n            <div className=\"answerBox\">{answer}</div>\r\n        ))}\r\n\r\n        {/* {[...correctValue].forEach(x => (\r\n          \r\n          <div className=\"answerBox\"></div>\r\n        ))} */}\r\n\r\n{/* \r\n        <div className=\"answerBox\"></div>\r\n        <div className=\"answerBox\"></div>\r\n        <div className=\"answerBox\"></div>\r\n        <div className=\"answerBox\"></div> */}\r\n        </div>\r\n        <div style={btnContainer}>\r\n\r\n          <Button number={1} onClick={() => appendNumber(1)} disabled={btnDisabled} />\r\n          <Button number={2} onClick={() => appendNumber(2)} disabled={btnDisabled} />\r\n          <Button number={3} onClick={() => appendNumber(3)} disabled={btnDisabled} />\r\n          <br/>\r\n          <Button number={4} onClick={() => appendNumber(4)} disabled={btnDisabled} />\r\n          <Button number={5} onClick={() => appendNumber(5)} disabled={btnDisabled} />\r\n          <Button number={6} onClick={() => appendNumber(6)} disabled={btnDisabled} />\r\n          <br/>\r\n          <Button number={7} onClick={() => appendNumber(7)} disabled={btnDisabled} />\r\n          <Button number={8} onClick={() => appendNumber(8)} disabled={btnDisabled} />\r\n          <Button number={9} onClick={() => appendNumber(9)} disabled={btnDisabled} />\r\n          <br/>\r\n          <Button number={0} onClick={() => appendNumber(0)} disabled={btnDisabled} />\r\n          {/* <Button number={\"Clear\"} onClick={() => clearValue()} disabled={btnDisabled} /> */}\r\n          <br />\r\n        </div>\r\n        <div style={{textAlign: \"center\"}}>\r\n          <button onClick={clearValue} style={{ backgroundColor: \"red\"}}>Clear</button>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst btnContainer = {\r\n  textAlign: \"center\"\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}