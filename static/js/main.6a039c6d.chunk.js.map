{"version":3,"sources":["logo.svg","button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","number","onClick","disabled","style","display","label","toString","value","className","App","useState","guess","setGuess","useLocalStorage","correctValue","setCorrectValue","isSuccess","setIsSuccess","isMissionFailure","setIsMissionFailure","btnDisabled","setBtnDisabled","isToriWin","setIsToriWin","isEnablePasscodeResetButtonVisible","setEnablePasscodeResetButtonVisible","isSetButtonVisible","setIsSetButtonVisible","appendNumber","newVal","concat","length","val","JSON","stringify","inputLengthReached","clearValue","background","align","width","initialTime","direction","Minutes","Seconds","map","answer","index","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6a039c6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState } from 'react';\r\nimport './styles/buttonStyle.scss';\r\n\r\nfunction Button({ number, onClick, disabled }) {\r\n    return (\r\n        <div style={{ display: \"inline\" }}>\r\n            <button label={number.toString()} value={number} onClick={onClick}\r\n                disabled={disabled} className=\"btnStyle\">{number}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, { useCallback, useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport Button from './button.js';\r\nimport './styles/app.scss';\r\nimport Timer, { useTimer } from 'react-compound-timer';\r\nimport useLocalStorage from 'local-storage-hook'\r\n\r\n\r\nfunction App() {\r\n  const [guess, setGuess] = useState([]);\r\n  const [correctValue, setCorrectValue] = useLocalStorage(\"answerKey\", [1, 2, 3, 4]);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [isMissionFailure, setIsMissionFailure] = useState(false);\r\n  const [btnDisabled, setBtnDisabled] = useState(false);\r\n  const [isToriWin, setIsToriWin] = useState(false);\r\n\r\n  const [isEnablePasscodeResetButtonVisible, setEnablePasscodeResetButtonVisible] = useState(true);\r\n  const [isSetButtonVisible, setIsSetButtonVisible] = useState(false);\r\n\r\n  function appendNumber(number) {\r\n    // var newValue = parseInt(value.toString() + number.toString());\r\n    var newVal = guess.concat(number);\r\n    setGuess(newVal);\r\n    guess.length + 1 < correctValue.length ? setBtnDisabled(false) : inputLengthReached(newVal);\r\n  }\r\n\r\n  function inputLengthReached(newVal) {\r\n    setBtnDisabled(true)\r\n    isGuessCorrect(newVal) ? setIsSuccess(true) : makeMissionFailure();\r\n  }\r\n\r\n  function makeMissionFailure() {\r\n    setIsSuccess(false);\r\n    setIsMissionFailure(true);\r\n  }\r\n\r\n  function isGuessCorrect(val) {\r\n    return JSON.stringify(val) === JSON.stringify(correctValue) ?\r\n      true :\r\n      JSON.stringify(val) === JSON.stringify([1, 9, 9, 9]) ?\r\n        toriWin() :\r\n        JSON.stringify(val) === JSON.stringify([2,8,4,6]) ? \r\n        setEnablePasscodeResetButtonVisible(true) : false;\r\n  }\r\n\r\n  function toriWin() {\r\n    setIsToriWin(true);\r\n    return false;\r\n  }\r\n  function clearValue() {\r\n    setGuess([]);\r\n    setIsSuccess(false);\r\n    setBtnDisabled(false);\r\n    setIsMissionFailure(false);\r\n    setIsToriWin(false);\r\n    setEnablePasscodeResetButtonVisible(false);\r\n    setIsSetButtonVisible(false);\r\n  }\r\n\r\n  function updateCorrectAnswer() {\r\n    setCorrectValue(guess);\r\n    clearValue();\r\n  }\r\n\r\n  function displaySetButton() {\r\n    setIsSetButtonVisible(true);\r\n    setGuess([]);\r\n    setBtnDisabled(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" >\r\n      <header className=\"App-header\">\r\n        <div background=\"dark-1\" align=\"center\" style={{ margin: \"auto\" }, { width: \"100%\" }}>\r\n          {isEnablePasscodeResetButtonVisible && <button onClick={displaySetButton} className=\"enablePasscodeResetButton\">X</button>}\r\n          {isSuccess ? <h1 className=\"digitalClock digitalFont\">Win</h1>\r\n            : isToriWin ? <h1 className=\"digitalClock digitalFont\">tori</h1> : isMissionFailure ? <h1 className=\"digitalClock digitalFont\">lose</h1> :\r\n              <Timer\r\n                initialTime={1000 * 60 * 15}\r\n                direction=\"backward\"\r\n              >\r\n                <h1 className=\"digitalClock digitalFont\">\r\n                  <Timer.Minutes />:<Timer.Seconds />\r\n                </h1>\r\n              </Timer>\r\n          }\r\n          <br />\r\n          <div className=\"answerSection\">\r\n            {correctValue.map((answer, index) => (\r\n              <div className=\"answerBox\">{typeof guess[index] === 'undefined' ? 'X' : guess[index].toString()}</div>\r\n            ))}\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"keypadContainer\">\r\n\r\n          <Button number={1} onClick={() => appendNumber(1)} disabled={btnDisabled} />\r\n          <Button number={2} onClick={() => appendNumber(2)} disabled={btnDisabled} />\r\n          <Button number={3} onClick={() => appendNumber(3)} disabled={btnDisabled} />\r\n          <br />\r\n          <Button number={4} onClick={() => appendNumber(4)} disabled={btnDisabled} />\r\n          <Button number={5} onClick={() => appendNumber(5)} disabled={btnDisabled} />\r\n          <Button number={6} onClick={() => appendNumber(6)} disabled={btnDisabled} />\r\n          <br />\r\n          <Button number={7} onClick={() => appendNumber(7)} disabled={btnDisabled} />\r\n          <Button number={8} onClick={() => appendNumber(8)} disabled={btnDisabled} />\r\n          <Button number={9} onClick={() => appendNumber(9)} disabled={btnDisabled} />\r\n          <br />\r\n          <Button number={0} onClick={() => appendNumber(0)} disabled={btnDisabled} />\r\n          {/* <Button number={\"Clear\"} onClick={() => clearValue()} disabled={btnDisabled} /> */}\r\n          <br />\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <button onClick={clearValue} className=\"clearButton\">Clear</button>\r\n          {isSetButtonVisible && <button onClick={updateCorrectAnswer} className=\"clearButton\">Set</button> }\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}